UNIVERSAL ID PIPELINE ORCHESTRATOR
============================================================
🎼 MusicXML: SS 9.musicxml
🎹 MIDI: Saint-Saens Trio No 2.mid
🎨 SVG: SS 9 full.svg
📁 Output: universal_output
🚀 Mode: sequential
🔄 Workers: 4
🛡️  Circuit Breaker: Enabled
🎯 Universal ID Preservation: Enabled
📝 New Filename Pattern: Enabled

[20:26:21] 🚀 Starting Universal ID Pipeline Orchestration
[20:26:21] Phase 1: Initializing Core Components
[20:26:21] ✅ Core components initialized
[20:26:21] Phase 2: Executing Note Coordinator
🔄 Executing: note_coordinator
   📝 Generate Universal ID registry and manifests
   💻 Command: python Brain/orchestrator/note_coordinator.py Brain/Base/SS 9.musicxml Brain/Base/Saint-Saens Trio No 2.mid universal_output
   ✅ Completed in 0.1s
      NOTE COORDINATOR - Universal Note Matching System
      ============================================================
      📄 MusicXML: Brain/Base/SS 9.musicxml
      🎵 MIDI: Brain/Base/Saint-Saens Trio No 2.mid
      📁 Output: universal_output
      📄 Loading XML notes from: Brain/Base/SS 9.musicxml
         ✅ Loaded 9 XML notes from 2 parts
      🎵 Loading MIDI notes from: Brain/Base/Saint-Saens Trio No 2.mid
         ✅ Loaded 6 MIDI notes from 2 tracks
      🖼️  Calculating SVG coordinates
         ✅ Calculated 9 SVG coordinates
      🌍 Creating universal note registry
      🔗 Matching XML to MIDI notes
         ✅ Matched 6/9 XML notes to MIDI
         ✅ Created 9 universal notes
      💾 Saved coordination data to: universal_output
         📋 universal_notes_registry.json - Complete note registry
         🎵 midi_pipeline_manifest.json - MIDI pipeline tracking
         🖼️  svg_pipeline_manifest.json - SVG pipeline tracking
         📊 coordination_metadata.json - Comprehensive metadata
      🎯 COORDINATION COMPLETE!
      ============================================================
      ✅ Total Notes: 9
      🔗 High Confidence Matches: 6
      📊 Average Match Confidence: 0.67
      ⏱️  Total Duration: 9.50s
      📋 Instrument Breakdown:
         P1: 3 notes, 2 matched to MIDI
         P2: 6 notes, 4 matched to MIDI
      🚀 Ready for pipeline execution with universal note tracking!
      ... (31 additional lines captured)

[20:26:21] ✅ Note Coordinator completed: 9 Universal IDs loaded
[20:26:21] Phase 3: Executing Tied Note Processor
🔄 Executing: tied_note_processor
   📝 Process tied note relationships with timing calculations
   💻 Command: python Brain/orchestrator/tied_note_processor.py Brain/Base/SS 9.musicxml universal_output/coordination_metadata.json universal_output/universal_notes_registry.json
   ✅ Completed in 0.1s
      TIED NOTE PROCESSOR TEST
      ==================================================
      📄 MusicXML: Brain/Base/SS 9.musicxml
      ⏱️  Master timing: universal_output/coordination_metadata.json
      🎯 Matches: universal_output/universal_notes_registry.json
      🎵 Tempo: 120.0 BPM
      ✅ XML Analysis Complete:
         📝 Total notes: 9
         🔗 Tied groups: 2
      ✅ Loaded 0 note matches
      🔗 TIED NOTE PROCESSOR INITIALIZED
      🎵 Default tempo: 120.0 BPM
      TIED NOTE RELATIONSHIP PROCESSING
      ==================================================
      🎼 Total XML notes: 9
      🔗 Tied groups: 2
      🎯 Note matches: 0
      📋 Creating structured tied note groups...
      ✅ Group tied_group_1: 2 notes, primary: A4 @ M4
      ✅ Group tied_group_2: 2 notes, primary: B3 @ M4
      📊 Created 2 tied note groups
      🎯 Matching tied groups with MIDI notes...
      ❌ Group tied_group_1 primary note not matched: A4 @ 7.500s
      ❌ Group tied_group_2 primary note not matched: B3 @ 6.000s
      📈 Matched 0/2 tied groups with MIDI
      ⏱️  Calculating tied note timing...
      ⚠️  Skipping unmatched group: tied_group_1
      ⚠️  Skipping unmatched group: tied_group_2
      🎵 Processing non-tied notes...
      ✅ Processed 0 non-tied notes with direct MIDI timing
      🔍 Validating timing assignments...
      📊 VALIDATION RESULTS:
      ✅ Total assignments: 0
      🎯 Primary notes (MIDI exact): 0
      🔗 Tied notes (calculated): 0
      📈 Average confidence: 0.000
      💾 Tied note assignments saved to: universal_output/tied_note_assignments.json
      ✅ After Effects timing data saved to: universal_output/ae_timing_data.json
      🎯 TIED NOTE PROCESSING COMPLETE!
      ✅ Total assignments: 0
      🎯 Primary (MIDI exact): 0
      🔗 Tied (calculated): 0
      📈 Average confidence: 0.000
      ⏱️  Timing spread: 0.000s
      ... (51 additional lines captured)

[20:26:22] ✅ Tied Note Processor completed with timing calculations
[20:26:22] Phase 4: Executing Pipeline Stages
[20:26:22] 🔄 Executing Sequential Pipeline
🔄 Executing: noteheads_extraction
   📝 Extract noteheads from MusicXML with pixel-perfect coordinates
   💻 Command: python Brain/App/Symbolic Separators/truly_universal_noteheads_extractor.py Brain/Base/SS 9.musicxml
   ✅ Completed in 0.0s
      TRULY UNIVERSAL NOTEHEADS EXTRACTOR
      ==================================================
      Input: Brain/Base/SS 9.musicxml
      Output: outputs/svg/noteheads/SS 9_noteheads_universal.svg
      ✅ Extracted 9 notes from 2 parts
      ✅ Applied universal coordinate transformation
      ✅ Created universal noteheads SVG: outputs/svg/noteheads/SS 9_noteheads_universal.svg
      SUMMARY:
      Part P1: 3 notes
        A4 M4 → SVG(3178,1037)
        A4 M5 → SVG(3454,1037)
        G4 M5 → SVG(3618,1049)
      Part P2: 6 notes
        B3 M4 → SVG(2723,1429)
        B3 M4 → SVG(3178,1429)
        B3 M5 → SVG(3454,1429)
        A3 M5 → SVG(3618,1441)
        C4 M5 → SVG(3842,1417)
        B3 M5 → SVG(4006,1429)
      🎯 SUCCESS! Universal transformation applied to Brain/Base/SS 9.musicxml
      ... (20 additional lines captured)

🔄 Executing: noteheads_subtraction
   📝 Remove noteheads from full SVG while preserving other elements
   💻 Command: python Brain/App/Symbolic Separators/truly_universal_noteheads_subtractor.py Brain/Base/SS 9.musicxml Brain/Base/SS 9 full.svg
   ✅ Completed in 0.0s
      TRULY UNIVERSAL NOTEHEADS SUBTRACTOR
      ==================================================
      MusicXML: Brain/Base/SS 9.musicxml
      Full SVG: Brain/Base/SS 9 full.svg
      Output: outputs/svg/SS 9 full_without_noteheads.svg
      ✅ Found 9 notes in 2 parts
      ✅ Calculated 9 notehead coordinates to remove
      Original SVG size: 43265 characters
      Expected notehead coordinates: 9
      ✓ Removing notehead at (3179.0, 1037.0) matching expected (3178, 1037)
      ✓ Removing notehead at (3453.0, 1037.0) matching expected (3454, 1037)
      ✓ Removing notehead at (3617.0, 1049.0) matching expected (3618, 1049)
      ✓ Removing notehead at (2723.0, 1429.0) matching expected (2723, 1429)
      ✓ Removing notehead at (3179.0, 1429.0) matching expected (3178, 1429)
      ✓ Removing notehead at (3453.0, 1429.0) matching expected (3454, 1429)
      ✓ Removing notehead at (3617.0, 1441.0) matching expected (3618, 1441)
      ✓ Removing notehead at (3843.0, 1417.0) matching expected (3842, 1417)
      ✓ Removing notehead at (4006.0, 1429.0) matching expected (4006, 1429)
      Removed 9 noteheads (should be exactly 9)
      Remaining unmatched coordinates: 0
      Filtered SVG size: 41618 characters
      Size reduction: 1647 characters
      ✅ Created SVG without noteheads: outputs/svg/SS 9 full_without_noteheads.svg
      🎯 SUCCESS! Full SVG with noteheads removed: outputs/svg/SS 9 full_without_noteheads.svg
      ... (23 additional lines captured)

🔄 Executing: instrument_separation
   📝 Create individual SVG files per instrument
   💻 Command: python Brain/App/Symbolic Separators/xml_based_instrument_separator.py Brain/Base/SS 9.musicxml Brain/Base/SS 9 full.svg outputs/svg/instruments
   ✅ Completed in 0.0s
      XML-BASED UNIVERSAL INSTRUMENT SEPARATOR
      ==================================================
      MusicXML: Brain/Base/SS 9.musicxml
      Full SVG: Brain/Base/SS 9 full.svg
      Output Directory: outputs/svg/instruments
      🎵 Found 2 instruments:
         1. Flûte (P1) - Flute (2)
         2. Violon (P2) - Violin
      📐 Calculated staff positions using universal transformation
      Original SVG: Brain/Base/SS 9 full.svg
      🎼 Processing Flûte (P1)...
         Staff Y range: 950 to 1100
         ✅ Created: Flûte_P1.svg
         📊 Kept 34 elements, removed 59 elements
         💾 File size: 36714 bytes
      🎼 Processing Violon (P2)...
         Staff Y range: 1250 to 1500
         ✅ Created: Violon_P2.svg
         📊 Kept 49 elements, removed 44 elements
         💾 File size: 38183 bytes
      🎯 SUCCESS! Created 2 instrument-specific SVG files in 'outputs/svg/instruments/' directory
      ... (23 additional lines captured)

🔄 Executing: individual_noteheads_creation
   📝 Create one SVG file per notehead for After Effects animation
   💻 Command: python Brain/App/Symbolic Separators/individual_noteheads_creator.py Brain/Base/SS 9.musicxml
   ✅ Completed in 0.0s
      INDIVIDUAL NOTEHEADS CREATOR
      ========================================
      MusicXML: Brain/Base/SS 9.musicxml
      Output Directory: outputs/svg/noteheads
      🎵 Found 9 notes
      🎼 Instrument mapping: {'P1': 'Flûte', 'P2': 'Violon'}
         ✅ Created: notehead_000_P1_A4_M4.svg
            📍 Position: (3178, 1037) - A4 quarter
         ✅ Created: notehead_001_P1_A4_M5.svg
            📍 Position: (3454, 1037) - A4 eighth
         ✅ Created: notehead_002_P1_G4_M5.svg
            📍 Position: (3617, 1049) - G4 quarter
         ✅ Created: notehead_003_P2_B3_M4.svg
            📍 Position: (2722, 1429) - B3 half
         ✅ Created: notehead_004_P2_B3_M4.svg
            📍 Position: (3178, 1429) - B3 quarter
         ✅ Created: notehead_005_P2_B3_M5.svg
            📍 Position: (3454, 1429) - B3 eighth
         ✅ Created: notehead_006_P2_A3_M5.svg
            📍 Position: (3617, 1441) - A3 quarter
         ✅ Created: notehead_007_P2_C4_M5.svg
            📍 Position: (3841, 1417) - C4 eighth
         ✅ Created: notehead_008_P2_B3_M5.svg
            📍 Position: (4005, 1429) - B3 quarter
      🎯 SUCCESS! Created 9 individual notehead SVG files in 'outputs/svg/noteheads/' directory
      SUMMARY BY INSTRUMENT:
        P1: 3 noteheads
          A4 M4 → SVG(3178,1037)
          A4 M5 → SVG(3454,1037)
          G4 M5 → SVG(3617,1049)
        P2: 6 noteheads
          B3 M4 → SVG(2722,1429)
          B3 M4 → SVG(3178,1429)
          B3 M5 → SVG(3454,1429)
          A3 M5 → SVG(3617,1441)
          C4 M5 → SVG(3841,1417)
          B3 M5 → SVG(4005,1429)
      ... (37 additional lines captured)

🔄 Executing: staff_barlines_extraction
   📝 Extract staff lines and barlines for background elements
   💻 Command: python Brain/App/Symbolic Separators/staff_barlines_extractor.py Brain/Base/SS 9.musicxml Brain/Base/SS 9 full.svg
   ✅ Completed in 0.0s
      STAFF LINES + BARLINES EXTRACTOR
      ==================================================
      MusicXML: Brain/Base/SS 9.musicxml
      Full SVG: Brain/Base/SS 9 full.svg
      🎼 Found 2 staves
      📏 Found 5 measures
      📐 Identified 10 staff lines
      📏 Identified 13 barlines
      ✅ Created staff lines and barlines SVG: outputs/svg/staff_barlines/SS 9_staff_barlines.svg
      SUMMARY BY STAFF:
        Flûte: 5 staff lines
          Y=1073.0 (X: 564.0-4608.0)
          Y=1049.0 (X: 564.0-4608.0)
          Y=1025.0 (X: 564.0-4608.0)
          Y=1001.0 (X: 564.0-4608.0)
          Y=977.0 (X: 564.0-4608.0)
        Violon: 5 staff lines
          Y=1393.0 (X: 564.0-4608.0)
          Y=1369.0 (X: 564.0-4608.0)
          Y=1345.0 (X: 564.0-4608.0)
          Y=1321.0 (X: 564.0-4608.0)
          Y=1297.0 (X: 564.0-4608.0)
      BARLINES:
        X=566.0 (Y: 977.0-1393.0) - regular (stroke-width=5)
        X=1422.0 (Y: 977.0-1073.0) - regular (stroke-width=5)
        X=1422.0 (Y: 1297.0-1393.0) - regular (stroke-width=5)
        X=2047.0 (Y: 977.0-1073.0) - regular (stroke-width=5)
        X=2047.0 (Y: 1297.0-1393.0) - regular (stroke-width=5)
        X=2673.0 (Y: 977.0-1073.0) - regular (stroke-width=5)
        X=2673.0 (Y: 1297.0-1393.0) - regular (stroke-width=5)
        X=3403.0 (Y: 977.0-1073.0) - regular (stroke-width=5)
        X=3403.0 (Y: 1297.0-1393.0) - regular (stroke-width=5)
        X=4578.0 (Y: 977.0-1073.0) - regular (stroke-width=5)
        X=4600.0 (Y: 977.0-1073.0) - THICK (stroke-width=16)
        X=4578.0 (Y: 1297.0-1393.0) - regular (stroke-width=5)
        X=4600.0 (Y: 1297.0-1393.0) - THICK (stroke-width=16)
      🎯 SUCCESS! Extracted 10 staff lines and 13 barlines
      ... (39 additional lines captured)

🔄 Executing: midi_note_separation
   📝 Split MIDI into individual note files (foundation)
   💻 Command: python Brain/App/Audio Separators/midi_note_separator.py Brain/Base/Saint-Saens Trio No 2.mid
   ✅ Completed in 0.1s
      MIDI NOTE SEPARATOR
      ==================================================
      Input MIDI: Brain/Base/Saint-Saens Trio No 2.mid
      🎵 MIDI Type: 1
      ⏱️  Ticks per beat: 960
      🎼 Number of tracks: 3
      Track 0: Unnamed
        Notes found: 0
      Track 1: Flûte
        Notes found: 2
        Pitch distribution: {'A4': 1, 'G4': 1}
      Track 2: Violon
        Notes found: 4
        Pitch distribution: {'A3': 1, 'B3': 2, 'C4': 1}
      🎯 TOTAL NOTES: 6
      📁 Creating individual note files in: outputs/midi
      ✅ Created: note_000_Flûte_A4_vel76.mid
         Track: Flûte
         Note: A4 (MIDI 69)
         Velocity: 76
         Duration: 1440 ticks
         Start: 14400 ticks
      ✅ Created: note_001_Flûte_G4_vel76.mid
         Track: Flûte
         Note: G4 (MIDI 67)
         Velocity: 76
         Duration: 960 ticks
         Start: 15840 ticks
      ✅ Created: note_002_Violon_B3_vel65.mid
         Track: Violon
         Note: B3 (MIDI 59)
         Velocity: 65
         Duration: 4406 ticks
         Start: 11520 ticks
      ✅ Created: note_003_Violon_A3_vel66.mid
         Track: Violon
         Note: A3 (MIDI 57)
         Velocity: 66
         Duration: 979 ticks
         Start: 15840 ticks
      ✅ Created: note_004_Violon_C4_vel65.mid
         Track: Violon
         Note: C4 (MIDI 60)
         Velocity: 65
         Duration: 454 ticks
         Start: 16800 ticks
      ✅ Created: note_005_Violon_B3_vel64.mid
         Track: Violon
         Note: B3 (MIDI 59)
         Velocity: 64
         Duration: 960 ticks
         Start: 17280 ticks
      🎯 SUCCESS! Created 6 individual note files
      📁 Output directory: outputs/midi
      SUMMARY BY TRACK:
        Flûte: 2 notes
        Violon: 4 notes
      ... (68 additional lines captured)

🔄 Executing: midi_to_audio_rendering
   📝 Convert MIDI notes to audio files (fast mode)
   💻 Command: python Brain/App/Audio Separators/midi_to_audio_renderer_fast.py outputs/midi
   ✅ Completed in 0.8s
      FAST MIDI TO AUDIO RENDERER
      ==================================================
      Input directory: outputs/midi
      🎵 Using soundfont: /System/Library/Components/CoreAudio.component/Contents/Resources/gs_instruments.dls
      🎼 Found 2 instruments, 6 files total:
        Flûte: 2 notes
        Violon: 4 notes
      ⚡ Using 6 parallel workers for fast processing...
      ✅ note_000_Flûte_A4_vel76.mid → 1,049,900 bytes
      ✅ note_002_Violon_B3_vel65.mid → 1,054,764 bytes
      ✅ note_003_Violon_A3_vel66.mid → 1,103,916 bytes
      ✅ note_005_Violon_B3_vel64.mid → 1,182,252 bytes
      ✅ note_001_Flûte_G4_vel76.mid → 1,102,892 bytes
      ✅ note_004_Violon_C4_vel65.mid → 1,127,980 bytes
      🎯 FAST RENDERING COMPLETE!
      📁 Output directory: outputs/audio
      ✅ Successfully rendered: 6 files
      ❌ Failed to render: 0 files
      📁 Audio file structure:
      audio/
        Flûte/
          note_001_Flûte_G4_vel76.wav (1,102,892 bytes)
          note_000_Flûte_A4_vel76.wav (1,049,900 bytes)
        Violon/
          note_004_Violon_C4_vel65.wav (1,127,980 bytes)
          note_003_Violon_A3_vel66.wav (1,103,916 bytes)
          note_005_Violon_B3_vel64.wav (1,182,252 bytes)
          note_002_Violon_B3_vel65.wav (1,054,764 bytes)
      ... (31 additional lines captured)

🔄 Executing: audio_to_keyframes
   📝 Generate After Effects keyframe data (fast mode)
   💻 Command: python Brain/App/Audio Separators/audio_to_keyframes_fast.py outputs/audio
   ✅ Completed in 4.9s
      FAST AUDIO TO KEYFRAMES EXTRACTOR
      ==================================================
      Input directory: outputs/audio
      🎵 Found 6 audio files
      ⚡ Using 6 parallel workers for fast processing...
      🔊 Analyzing: note_004_Violon_C4_vel65.wav
         Duration: 10.000s, Sample Rate: 22050Hz
      🔊 Analyzing: note_003_Violon_A3_vel66.wav
         Duration: 10.000s, Sample Rate: 22050Hz
      🔊 Analyzing: note_001_Flûte_G4_vel76.wav
         Duration: 10.000s, Sample Rate: 22050Hz
      🔊 Analyzing: note_000_Flûte_A4_vel76.wav
         Duration: 10.000s, Sample Rate: 22050Hz
      🔊 Analyzing: note_002_Violon_B3_vel65.wav
         Duration: 10.000s, Sample Rate: 22050Hz
      🔊 Analyzing: note_005_Violon_B3_vel64.wav
         Duration: 10.000s, Sample Rate: 22050Hz
      ✅ note_004_Violon_C4_vel65.wav
         Duration: 10.00s, Keyframes: 72
      ✅ note_003_Violon_A3_vel66.wav
         Duration: 10.00s, Keyframes: 72
      ✅ note_001_Flûte_G4_vel76.wav
         Duration: 10.00s, Keyframes: 72
      ✅ note_000_Flûte_A4_vel76.wav
         Duration: 10.00s, Keyframes: 72
      ✅ note_002_Violon_B3_vel65.wav
         Duration: 10.00s, Keyframes: 72
      ✅ note_005_Violon_B3_vel64.wav
         Duration: 10.00s, Keyframes: 72
      🎯 FAST KEYFRAME GENERATION COMPLETE!
      📁 Output directory: outputs/json/keyframes
      ✅ Successfully processed: 6 files
      ❌ Failed to process: 0 files
      📁 Keyframe file structure:
      keyframes/
        Flûte/
          note_000_Flûte_A4_vel76_keyframes.json
          note_001_Flûte_G4_vel76_keyframes.json
        Violon/
          note_003_Violon_A3_vel66_keyframes.json
          note_004_Violon_C4_vel65_keyframes.json
          note_002_Violon_B3_vel65_keyframes.json
          ... and 1 more files
      🎯 Cleanup complete, exiting...
      ... (46 additional lines captured)

📁 FILES GENERATED: 🎵 16 audio (4.3 MB total)
📊 EXECUTION SUMMARY: 423 messages processed, 4 patterns identified, -0.2% aggregation efficiency
🔥 NUCLEAR EXIT: Last stage completed, forcing immediate termination!
[20:28:33] 🚀 Starting Universal ID Pipeline Orchestration
[20:28:33] Phase 1: Initializing Core Components
[20:28:33] ✅ Core components initialized
[20:28:33] Phase 2: Executing Note Coordinator
      NOTE COORDINATOR - Universal Note Matching System
      ============================================================
      📄 MusicXML: Brain/Base/SS 9.musicxml
      🎵 MIDI: Brain/Base/Saint-Saens Trio No 2.mid
      📁 Output: universal_output
      📄 Loading XML notes from: Brain/Base/SS 9.musicxml
         ✅ Loaded 9 XML notes from 2 parts
      🎵 Loading MIDI notes from: Brain/Base/Saint-Saens Trio No 2.mid
         ✅ Loaded 6 MIDI notes from 2 tracks
      🖼️  Calculating SVG coordinates
         ✅ Calculated 9 SVG coordinates
      🌍 Creating universal note registry
      🔗 Matching XML to MIDI notes
         ✅ Matched 6/9 XML notes to MIDI
         ✅ Created 9 universal notes
      💾 Saved coordination data to: universal_output
         📋 universal_notes_registry.json - Complete note registry
         🎵 midi_pipeline_manifest.json - MIDI pipeline tracking
         🖼️  svg_pipeline_manifest.json - SVG pipeline tracking
         📊 coordination_metadata.json - Comprehensive metadata
      🎯 COORDINATION COMPLETE!
      ============================================================
      ✅ Total Notes: 9
      🔗 High Confidence Matches: 6
      📊 Average Match Confidence: 0.67
      ⏱️  Total Duration: 9.50s
      📋 Instrument Breakdown:
         P1: 3 notes, 2 matched to MIDI
         P2: 6 notes, 4 matched to MIDI
      🚀 Ready for pipeline execution with universal note tracking!
[20:28:33] ✅ Note Coordinator completed: 9 Universal IDs loaded
[20:28:33] Phase 3: Executing Tied Note Processor
      TIED NOTE PROCESSOR TEST
      ==================================================
      📄 MusicXML: Brain/Base/SS 9.musicxml
      ⏱️  Master timing: universal_output/coordination_metadata.json
      🎯 Matches: universal_output/universal_notes_registry.json
      🎵 Tempo: 120.0 BPM
      ✅ XML Analysis Complete:
         📝 Total notes: 9
         🔗 Tied groups: 2
      ✅ Loaded 0 note matches
      🔗 TIED NOTE PROCESSOR INITIALIZED
      🎵 Default tempo: 120.0 BPM
      TIED NOTE RELATIONSHIP PROCESSING
      ==================================================
      🎼 Total XML notes: 9
      🔗 Tied groups: 2
      🎯 Note matches: 0
      📋 Creating structured tied note groups...
      ✅ Group tied_group_1: 2 notes, primary: A4 @ M4
      ✅ Group tied_group_2: 2 notes, primary: B3 @ M4
      📊 Created 2 tied note groups
      🎯 Matching tied groups with MIDI notes...
      ❌ Group tied_group_1 primary note not matched: A4 @ 7.500s
      ❌ Group tied_group_2 primary note not matched: B3 @ 6.000s
      📈 Matched 0/2 tied groups with MIDI
      ⏱️  Calculating tied note timing...
      ⚠️  Skipping unmatched group: tied_group_1
      ⚠️  Skipping unmatched group: tied_group_2
      🎵 Processing non-tied notes...
      ✅ Processed 0 non-tied notes with direct MIDI timing
      🔍 Validating timing assignments...
      📊 VALIDATION RESULTS:
      ✅ Total assignments: 0
      🎯 Primary notes (MIDI exact): 0
      🔗 Tied notes (calculated): 0
      📈 Average confidence: 0.000
      💾 Tied note assignments saved to: universal_output/tied_note_assignments.json
      ✅ After Effects timing data saved to: universal_output/ae_timing_data.json
      🎯 TIED NOTE PROCESSING COMPLETE!
      ✅ Total assignments: 0
      🎯 Primary (MIDI exact): 0
      🔗 Tied (calculated): 0
      📈 Average confidence: 0.000
      ⏱️  Timing spread: 0.000s
[20:28:33] ✅ Tied Note Processor completed with timing calculations
[20:28:33] Phase 4: Executing Pipeline Stages
[20:28:33] 🔄 Executing Sequential Pipeline
      TRULY UNIVERSAL NOTEHEADS EXTRACTOR
      ==================================================
      Input: Brain/Base/SS 9.musicxml
      Output: outputs/svg/noteheads/SS 9_noteheads_universal.svg
      ✅ Extracted 9 notes from 2 parts
      ✅ Applied universal coordinate transformation
      ✅ Created universal noteheads SVG: outputs/svg/noteheads/SS 9_noteheads_universal.svg
      SUMMARY:
      Part P1: 3 notes
        A4 M4 → SVG(3178,1037)
        A4 M5 → SVG(3454,1037)
        G4 M5 → SVG(3618,1049)
      Part P2: 6 notes
        B3 M4 → SVG(2723,1429)
        B3 M4 → SVG(3178,1429)
        B3 M5 → SVG(3454,1429)
        A3 M5 → SVG(3618,1441)
        C4 M5 → SVG(3842,1417)
        B3 M5 → SVG(4006,1429)
      🎯 SUCCESS! Universal transformation applied to Brain/Base/SS 9.musicxml
      TRULY UNIVERSAL NOTEHEADS SUBTRACTOR
      ==================================================
      MusicXML: Brain/Base/SS 9.musicxml
      Full SVG: Brain/Base/SS 9 full.svg
      Output: outputs/svg/SS 9 full_without_noteheads.svg
      ✅ Found 9 notes in 2 parts
      ✅ Calculated 9 notehead coordinates to remove
      Original SVG size: 43265 characters
      Expected notehead coordinates: 9
      ✓ Removing notehead at (3179.0, 1037.0) matching expected (3178, 1037)
      ✓ Removing notehead at (3453.0, 1037.0) matching expected (3454, 1037)
      ✓ Removing notehead at (3617.0, 1049.0) matching expected (3618, 1049)
      ✓ Removing notehead at (2723.0, 1429.0) matching expected (2723, 1429)
      ✓ Removing notehead at (3179.0, 1429.0) matching expected (3178, 1429)
      ✓ Removing notehead at (3453.0, 1429.0) matching expected (3454, 1429)
      ✓ Removing notehead at (3617.0, 1441.0) matching expected (3618, 1441)
      ✓ Removing notehead at (3843.0, 1417.0) matching expected (3842, 1417)
      ✓ Removing notehead at (4006.0, 1429.0) matching expected (4006, 1429)
      Removed 9 noteheads (should be exactly 9)
      Remaining unmatched coordinates: 0
      Filtered SVG size: 41618 characters
      Size reduction: 1647 characters
      ✅ Created SVG without noteheads: outputs/svg/SS 9 full_without_noteheads.svg
      🎯 SUCCESS! Full SVG with noteheads removed: outputs/svg/SS 9 full_without_noteheads.svg
      XML-BASED UNIVERSAL INSTRUMENT SEPARATOR
      ==================================================
      MusicXML: Brain/Base/SS 9.musicxml
      Full SVG: Brain/Base/SS 9 full.svg
      Output Directory: outputs/svg/instruments
      🎵 Found 2 instruments:
         1. Flûte (P1) - Flute (2)
         2. Violon (P2) - Violin
      📐 Calculated staff positions using universal transformation
      Original SVG: Brain/Base/SS 9 full.svg
      🎼 Processing Flûte (P1)...
         Staff Y range: 950 to 1100
         ✅ Created: Flûte_P1.svg
         📊 Kept 34 elements, removed 59 elements
         💾 File size: 36714 bytes
      🎼 Processing Violon (P2)...
         Staff Y range: 1250 to 1500
         ✅ Created: Violon_P2.svg
         📊 Kept 49 elements, removed 44 elements
         💾 File size: 38183 bytes
      🎯 SUCCESS! Created 2 instrument-specific SVG files in 'outputs/svg/instruments/' directory
      INDIVIDUAL NOTEHEADS CREATOR
      ========================================
      MusicXML: Brain/Base/SS 9.musicxml
      Output Directory: outputs/svg/noteheads
      🎵 Found 9 notes
      🎼 Instrument mapping: {'P1': 'Flûte', 'P2': 'Violon'}
         ✅ Created: notehead_000_P1_A4_M4.svg
            📍 Position: (3178, 1037) - A4 quarter
         ✅ Created: notehead_001_P1_A4_M5.svg
            📍 Position: (3454, 1037) - A4 eighth
         ✅ Created: notehead_002_P1_G4_M5.svg
            📍 Position: (3617, 1049) - G4 quarter
         ✅ Created: notehead_003_P2_B3_M4.svg
            📍 Position: (2722, 1429) - B3 half
         ✅ Created: notehead_004_P2_B3_M4.svg
            📍 Position: (3178, 1429) - B3 quarter
         ✅ Created: notehead_005_P2_B3_M5.svg
            📍 Position: (3454, 1429) - B3 eighth
         ✅ Created: notehead_006_P2_A3_M5.svg
            📍 Position: (3617, 1441) - A3 quarter
         ✅ Created: notehead_007_P2_C4_M5.svg
            📍 Position: (3841, 1417) - C4 eighth
         ✅ Created: notehead_008_P2_B3_M5.svg
            📍 Position: (4005, 1429) - B3 quarter
      🎯 SUCCESS! Created 9 individual notehead SVG files in 'outputs/svg/noteheads/' directory
      SUMMARY BY INSTRUMENT:
        P1: 3 noteheads
          A4 M4 → SVG(3178,1037)
          A4 M5 → SVG(3454,1037)
          G4 M5 → SVG(3617,1049)
        P2: 6 noteheads
          B3 M4 → SVG(2722,1429)
          B3 M4 → SVG(3178,1429)
          B3 M5 → SVG(3454,1429)
          A3 M5 → SVG(3617,1441)
          C4 M5 → SVG(3841,1417)
          B3 M5 → SVG(4005,1429)
      STAFF LINES + BARLINES EXTRACTOR
      ==================================================
      MusicXML: Brain/Base/SS 9.musicxml
      Full SVG: Brain/Base/SS 9 full.svg
      🎼 Found 2 staves
      📏 Found 5 measures
      📐 Identified 10 staff lines
      📏 Identified 13 barlines
      ✅ Created staff lines and barlines SVG: outputs/svg/staff_barlines/SS 9_staff_barlines.svg
      SUMMARY BY STAFF:
        Flûte: 5 staff lines
          Y=1073.0 (X: 564.0-4608.0)
          Y=1049.0 (X: 564.0-4608.0)
          Y=1025.0 (X: 564.0-4608.0)
          Y=1001.0 (X: 564.0-4608.0)
          Y=977.0 (X: 564.0-4608.0)
        Violon: 5 staff lines
          Y=1393.0 (X: 564.0-4608.0)
          Y=1369.0 (X: 564.0-4608.0)
          Y=1345.0 (X: 564.0-4608.0)
          Y=1321.0 (X: 564.0-4608.0)
          Y=1297.0 (X: 564.0-4608.0)
      BARLINES:
        X=566.0 (Y: 977.0-1393.0) - regular (stroke-width=5)
        X=1422.0 (Y: 977.0-1073.0) - regular (stroke-width=5)
        X=1422.0 (Y: 1297.0-1393.0) - regular (stroke-width=5)
        X=2047.0 (Y: 977.0-1073.0) - regular (stroke-width=5)
        X=2047.0 (Y: 1297.0-1393.0) - regular (stroke-width=5)
        X=2673.0 (Y: 977.0-1073.0) - regular (stroke-width=5)
        X=2673.0 (Y: 1297.0-1393.0) - regular (stroke-width=5)
        X=3403.0 (Y: 977.0-1073.0) - regular (stroke-width=5)
        X=3403.0 (Y: 1297.0-1393.0) - regular (stroke-width=5)
        X=4578.0 (Y: 977.0-1073.0) - regular (stroke-width=5)
        X=4600.0 (Y: 977.0-1073.0) - THICK (stroke-width=16)
        X=4578.0 (Y: 1297.0-1393.0) - regular (stroke-width=5)
        X=4600.0 (Y: 1297.0-1393.0) - THICK (stroke-width=16)
      🎯 SUCCESS! Extracted 10 staff lines and 13 barlines
      MIDI NOTE SEPARATOR
      ==================================================
      Input MIDI: Brain/Base/Saint-Saens Trio No 2.mid
      🎵 MIDI Type: 1
      ⏱️  Ticks per beat: 960
      🎼 Number of tracks: 3
      Track 0: Unnamed
        Notes found: 0
      Track 1: Flûte
        Notes found: 2
        Pitch distribution: {'A4': 1, 'G4': 1}
      Track 2: Violon
        Notes found: 4
        Pitch distribution: {'A3': 1, 'B3': 2, 'C4': 1}
      🎯 TOTAL NOTES: 6
      📁 Creating individual note files in: outputs/midi
      ✅ Created: note_000_Flûte_A4_vel76.mid
         Track: Flûte
         Note: A4 (MIDI 69)
         Velocity: 76
         Duration: 1440 ticks
         Start: 14400 ticks
      ✅ Created: note_001_Flûte_G4_vel76.mid
         Track: Flûte
         Note: G4 (MIDI 67)
         Velocity: 76
         Duration: 960 ticks
         Start: 15840 ticks
      ✅ Created: note_002_Violon_B3_vel65.mid
         Track: Violon
         Note: B3 (MIDI 59)
         Velocity: 65
         Duration: 4406 ticks
         Start: 11520 ticks
      ✅ Created: note_003_Violon_A3_vel66.mid
         Track: Violon
         Note: A3 (MIDI 57)
         Velocity: 66
         Duration: 979 ticks
         Start: 15840 ticks
      ✅ Created: note_004_Violon_C4_vel65.mid
         Track: Violon
         Note: C4 (MIDI 60)
         Velocity: 65
         Duration: 454 ticks
         Start: 16800 ticks
      ✅ Created: note_005_Violon_B3_vel64.mid
         Track: Violon
         Note: B3 (MIDI 59)
         Velocity: 64
         Duration: 960 ticks
         Start: 17280 ticks
      🎯 SUCCESS! Created 6 individual note files
      📁 Output directory: outputs/midi
      SUMMARY BY TRACK:
        Flûte: 2 notes
        Violon: 4 notes
      FAST MIDI TO AUDIO RENDERER
      ==================================================
      Input directory: outputs/midi
      🎵 Using soundfont: /System/Library/Components/CoreAudio.component/Contents/Resources/gs_instruments.dls
      🎼 Found 2 instruments, 6 files total:
        Flûte: 2 notes
        Violon: 4 notes
      ⚡ Using 6 parallel workers for fast processing...
      ✅ note_003_Violon_A3_vel66.mid → 1,103,916 bytes
      ✅ note_000_Flûte_A4_vel76.mid → 1,049,900 bytes
      ✅ note_002_Violon_B3_vel65.mid → 1,054,764 bytes
      ✅ note_001_Flûte_G4_vel76.mid → 1,102,892 bytes
      ✅ note_005_Violon_B3_vel64.mid → 1,182,252 bytes
      ✅ note_004_Violon_C4_vel65.mid → 1,127,980 bytes
      🎯 FAST RENDERING COMPLETE!
      📁 Output directory: outputs/audio
      ✅ Successfully rendered: 6 files
      ❌ Failed to render: 0 files
      📁 Audio file structure:
      audio/
        Flûte/
          note_001_Flûte_G4_vel76.wav (1,102,892 bytes)
          note_000_Flûte_A4_vel76.wav (1,049,900 bytes)
        Violon/
          note_004_Violon_C4_vel65.wav (1,127,980 bytes)
          note_003_Violon_A3_vel66.wav (1,103,916 bytes)
          note_005_Violon_B3_vel64.wav (1,182,252 bytes)
          note_002_Violon_B3_vel65.wav (1,054,764 bytes)
      FAST AUDIO TO KEYFRAMES EXTRACTOR
      ==================================================
      Input directory: outputs/audio
      🎵 Found 6 audio files
      ⚡ Using 6 parallel workers for fast processing...
      🔊 Analyzing: note_003_Violon_A3_vel66.wav
         Duration: 10.000s, Sample Rate: 22050Hz
      🔊 Analyzing: note_001_Flûte_G4_vel76.wav
         Duration: 10.000s, Sample Rate: 22050Hz
      🔊 Analyzing: note_000_Flûte_A4_vel76.wav
         Duration: 10.000s, Sample Rate: 22050Hz
      🔊 Analyzing: note_005_Violon_B3_vel64.wav
         Duration: 10.000s, Sample Rate: 22050Hz
      🔊 Analyzing: note_004_Violon_C4_vel65.wav
         Duration: 10.000s, Sample Rate: 22050Hz
      🔊 Analyzing: note_002_Violon_B3_vel65.wav
         Duration: 10.000s, Sample Rate: 22050Hz
      ✅ note_003_Violon_A3_vel66.wav
         Duration: 10.00s, Keyframes: 72
      ✅ note_001_Flûte_G4_vel76.wav
         Duration: 10.00s, Keyframes: 72
      ✅ note_000_Flûte_A4_vel76.wav
         Duration: 10.00s, Keyframes: 72
      ✅ note_005_Violon_B3_vel64.wav
         Duration: 10.00s, Keyframes: 72
      ✅ note_004_Violon_C4_vel65.wav
         Duration: 10.00s, Keyframes: 72
      ✅ note_002_Violon_B3_vel65.wav
         Duration: 10.00s, Keyframes: 72
      🎯 FAST KEYFRAME GENERATION COMPLETE!
      📁 Output directory: outputs/json/keyframes
      ✅ Successfully processed: 6 files
      ❌ Failed to process: 0 files
      📁 Keyframe file structure:
      keyframes/
        Flûte/
          note_000_Flûte_A4_vel76_keyframes.json
          note_001_Flûte_G4_vel76_keyframes.json
        Violon/
          note_003_Violon_A3_vel66_keyframes.json
          note_004_Violon_C4_vel65_keyframes.json
          note_002_Violon_B3_vel65_keyframes.json
          ... and 1 more files
      🎯 Cleanup complete, exiting...
📁 FILES GENERATED: 🎵 16 audio (4.3 MB total)
📊 EXECUTION SUMMARY: 351 messages processed, 4 patterns identified, -0.3% aggregation efficiency
🔥 NUCLEAR EXIT: Last stage completed, forcing immediate termination!
