UNIVERSAL ID PIPELINE ORCHESTRATOR
============================================================
🎼 MusicXML: Saint-Saens Trio No 2.musicxml
🎹 MIDI: Saint-Saens Trio No 2.mid
🎨 SVG: Saint-Saens Trio No 2.svg
📁 Output: universal_output
🚀 Mode: sequential
🔄 Workers: 4
🛡️  Circuit Breaker: Enabled
🎯 Universal ID Preservation: Enabled
📝 New Filename Pattern: Enabled

[01:26:31] 🚀 Starting Universal ID Pipeline Orchestration
[01:26:31] Phase 1: Initializing Core Components
[01:26:31] ✅ Core components initialized
[01:26:31] Phase 2: Executing Note Coordinator
🔄 Executing: note_coordinator
   📝 Generate Universal ID registry and manifests
   💻 Command: python Brain/orchestrator/note_coordinator.py Brain/Base/Trill/Saint-Saens Trio No 2.musicxml Brain/Base/Trill/Saint-Saens Trio No 2.mid universal_output
   ✅ Completed in 0.1s
      NOTE COORDINATOR - Universal Note Matching System
      ============================================================
      📄 MusicXML: Brain/Base/Trill/Saint-Saens Trio No 2.musicxml
      🎵 MIDI: Brain/Base/Trill/Saint-Saens Trio No 2.mid
      📁 Output: universal_output
      📄 Loading XML notes from: Brain/Base/Trill/Saint-Saens Trio No 2.musicxml
         ✅ Loaded 10 XML notes from 2 parts
      🎵 Loading MIDI notes from: Brain/Base/Trill/Saint-Saens Trio No 2.mid
         ✅ Loaded 14 MIDI notes from 2 tracks
      🖼️  Calculating SVG coordinates
         ✅ Calculated 10 SVG coordinates
      🌍 Creating universal note registry
      🔗 Matching XML to MIDI notes
         ✅ Matched 8/10 XML notes to MIDI
         ✅ Created 10 universal notes
      💾 Saved coordination data to: universal_output
         📋 universal_notes_registry.json - Complete note registry
         🎵 midi_pipeline_manifest.json - MIDI pipeline tracking
         🖼️  svg_pipeline_manifest.json - SVG pipeline tracking
         📊 coordination_metadata.json - Comprehensive metadata
      🎯 COORDINATION COMPLETE!
      ============================================================
      ✅ Total Notes: 10
      🔗 High Confidence Matches: 8
      📊 Average Match Confidence: 0.80
      ⏱️  Total Duration: 9.50s
      📋 Instrument Breakdown:
         P1: 4 notes, 4 matched to MIDI
         P2: 6 notes, 4 matched to MIDI
      🚀 Ready for pipeline execution with universal note tracking!
      ... (31 additional lines captured)

[01:26:31] ✅ Note Coordinator completed: 10 Universal IDs loaded
[01:26:31] Phase 4: Executing Pipeline Stages
[01:26:31] 🔄 Executing Sequential Pipeline
🔄 Executing: noteheads_extraction
   📝 Extract noteheads from MusicXML with pixel-perfect coordinates and Universal ID preservation
   💻 Command: python Brain/App/Symbolic Separators/truly_universal_noteheads_extractor.py Brain/Base/Trill/Saint-Saens Trio No 2.musicxml
   ✅ Completed in 0.0s
      TRULY UNIVERSAL NOTEHEADS EXTRACTOR
      ==================================================
      Input: Brain/Base/Trill/Saint-Saens Trio No 2.musicxml
      Output: outputs/svg/noteheads/Saint-Saens Trio No 2_noteheads_universal.svg
      ✅ Extracted 10 notes from 2 parts
      ✅ Applied universal coordinate transformation
      ✅ Created universal noteheads SVG: outputs/svg/noteheads/Saint-Saens Trio No 2_noteheads_universal.svg
      SUMMARY:
      Part P1: 4 notes
        A4 M4 → SVG(3159,1037)
        A4 M5 → SVG(3438,1037)
        G4 M5 → SVG(3602,1049)
        B4 M5 → SVG(3832,1037)
      Part P2: 6 notes
        B3 M4 → SVG(2697,1429)
        B3 M4 → SVG(3159,1429)
        B3 M5 → SVG(3438,1429)
        A3 M5 → SVG(3602,1441)
        C4 M5 → SVG(3832,1417)
        B3 M5 → SVG(3999,1429)
      🎯 SUCCESS! Universal transformation applied to Brain/Base/Trill/Saint-Saens Trio No 2.musicxml
      ... (21 additional lines captured)

🔄 Executing: noteheads_subtraction
   📝 Remove noteheads from full SVG while preserving other elements with Universal ID preservation
   💻 Command: python Brain/App/Symbolic Separators/truly_universal_noteheads_subtractor.py Brain/Base/Trill/Saint-Saens Trio No 2.musicxml Brain/Base/Trill/Saint-Saens Trio No 2.svg
   ✅ Completed in 0.0s
      TRULY UNIVERSAL NOTEHEADS SUBTRACTOR
      ==================================================
      MusicXML: Brain/Base/Trill/Saint-Saens Trio No 2.musicxml
      Full SVG: Brain/Base/Trill/Saint-Saens Trio No 2.svg
      Output: outputs/svg/Saint-Saens Trio No 2_without_noteheads.svg
      ✅ Found 10 notes in 2 parts
      ✅ Calculated 10 notehead coordinates to remove
      Original SVG size: 41307 characters
      Expected notehead coordinates: 10
      Removed 0 noteheads (should be exactly 9)
      Remaining unmatched coordinates: 10
      Filtered SVG size: 41307 characters
      Size reduction: 0 characters
      ✅ Created SVG without noteheads: outputs/svg/Saint-Saens Trio No 2_without_noteheads.svg
      🎯 SUCCESS! Full SVG with noteheads removed: outputs/svg/Saint-Saens Trio No 2_without_noteheads.svg
      ... (14 additional lines captured)

🔄 Executing: instrument_separation
   📝 Create individual SVG files per instrument with Universal ID preservation
   💻 Command: python Brain/App/Symbolic Separators/xml_based_instrument_separator.py Brain/Base/Trill/Saint-Saens Trio No 2.musicxml Brain/Base/Trill/Saint-Saens Trio No 2.svg outputs/svg/instruments
   ✅ Completed in 0.0s
      XML-BASED UNIVERSAL INSTRUMENT SEPARATOR
      ==================================================
      MusicXML: Brain/Base/Trill/Saint-Saens Trio No 2.musicxml
      Full SVG: Brain/Base/Trill/Saint-Saens Trio No 2.svg
      Output Directory: outputs/svg/instruments
      🎵 Found 2 instruments:
         1. Flûte (P1) - Flute (2)
         2. Violon (P2) - Violin
      📐 Calculated staff positions using universal transformation
      Original SVG: Brain/Base/Trill/Saint-Saens Trio No 2.svg
      🎼 Processing Flûte (P1)...
         Staff Y range: 950 to 1100
         ✅ Created: Flûte_P1.svg
         📊 Kept 36 elements, removed 60 elements
         💾 File size: 34548 bytes
      🎼 Processing Violon (P2)...
         Staff Y range: 1250 to 1500
         ✅ Created: Violon_P2.svg
         📊 Kept 53 elements, removed 43 elements
         💾 File size: 36070 bytes
      🎯 SUCCESS! Created 2 instrument-specific SVG files in 'outputs/svg/instruments/' directory
      ... (23 additional lines captured)

🔄 Executing: individual_noteheads_creation
   📝 Create one SVG file per notehead for After Effects animation with Universal ID preservation
   💻 Command: python Brain/App/Symbolic Separators/individual_noteheads_creator.py Brain/Base/Trill/Saint-Saens Trio No 2.musicxml --registry universal_output/universal_notes_registry.json
   ✅ Completed in 0.0s
      INDIVIDUAL NOTEHEADS CREATOR
      ========================================
      MusicXML: Brain/Base/Trill/Saint-Saens Trio No 2.musicxml
      Output Directory: outputs/svg/noteheads
      🎵 Found 10 notes
      🎼 Instrument mapping: {'P1': 'Flûte', 'P2': 'Violon'}
            🔗 Universal ID: 4bbc0df6-464... (confidence: 100.0%)
         ✅ Created: notehead_000_P1_A4_M4_4bbc.svg
            📍 Position: (3159, 1037) - A4 quarter
            🔗 Universal ID: 4bbc0df6-464... (confidence: 100.0%)
         ✅ Created: notehead_001_P1_A4_M5_4bbc.svg
            📍 Position: (3437, 1037) - A4 eighth
            🔗 Universal ID: de7f91e6-5fe... (confidence: 100.0%)
         ✅ Created: notehead_002_P1_G4_M5_de7f.svg
            📍 Position: (3601, 1049) - G4 quarter
            🔗 Universal ID: 473c3978-963... (confidence: 100.0%)
         ✅ Created: notehead_003_P1_B4_M5_473c.svg
            📍 Position: (3832, 1037) - B4 eighth
            🔗 Universal ID: 010532f2-08f... (confidence: 100.0%)
         ✅ Created: notehead_004_P2_B3_M4_0105.svg
            📍 Position: (2697, 1429) - B3 half
            🔗 Universal ID: 010532f2-08f... (confidence: 100.0%)
         ✅ Created: notehead_005_P2_B3_M4_0105.svg
            📍 Position: (3159, 1429) - B3 quarter
            🔗 Universal ID: 010532f2-08f... (confidence: 100.0%)
         ✅ Created: notehead_006_P2_B3_M5_0105.svg
            📍 Position: (3437, 1429) - B3 eighth
            🔗 Universal ID: aaa63507-394... (confidence: 100.0%)
         ✅ Created: notehead_007_P2_A3_M5_aaa6.svg
            📍 Position: (3601, 1441) - A3 quarter
            🔗 Universal ID: abf5585e-de3... (confidence: 100.0%)
         ✅ Created: notehead_008_P2_C4_M5_abf5.svg
            📍 Position: (3832, 1417) - C4 eighth
            🔗 Universal ID: 010532f2-08f... (confidence: 100.0%)
         ✅ Created: notehead_009_P2_B3_M5_0105.svg
            📍 Position: (3999, 1429) - B3 quarter
      🎯 SUCCESS! Created 10 individual notehead SVG files in 'outputs/svg/noteheads/' directory
      SUMMARY BY INSTRUMENT:
        P1: 4 noteheads
          A4 M4 → SVG(3159,1037)
          A4 M5 → SVG(3437,1037)
          G4 M5 → SVG(3601,1049)
          B4 M5 → SVG(3832,1037)
        P2: 6 noteheads
          B3 M4 → SVG(2697,1429)
          B3 M4 → SVG(3159,1429)
          B3 M5 → SVG(3437,1429)
          A3 M5 → SVG(3601,1441)
          C4 M5 → SVG(3832,1417)
          B3 M5 → SVG(3999,1429)
      ... (50 additional lines captured)

🔄 Executing: staff_barlines_extraction
   📝 Extract staff lines and barlines for background elements with Universal ID preservation
   💻 Command: python Brain/App/Symbolic Separators/staff_barlines_extractor.py Brain/Base/Trill/Saint-Saens Trio No 2.musicxml Brain/Base/Trill/Saint-Saens Trio No 2.svg
   ✅ Completed in 0.0s
      STAFF LINES + BARLINES EXTRACTOR
      ==================================================
      MusicXML: Brain/Base/Trill/Saint-Saens Trio No 2.musicxml
      Full SVG: Brain/Base/Trill/Saint-Saens Trio No 2.svg
      🎼 Found 2 staves
      📏 Found 5 measures
      📐 Identified 0 staff lines
      📏 Identified 13 barlines
      ✅ Created staff lines and barlines SVG: outputs/svg/staff_barlines/Saint-Saens Trio No 2_staff_barlines.svg
      SUMMARY BY STAFF:
      BARLINES:
        X=568.0 (Y: 962.0-1346.0) - regular (stroke-width=5)
        X=1380.0 (Y: 962.0-1058.0) - regular (stroke-width=5)
        X=1380.0 (Y: 1250.0-1346.0) - regular (stroke-width=5)
        X=2014.0 (Y: 962.0-1058.0) - regular (stroke-width=5)
        X=2014.0 (Y: 1250.0-1346.0) - regular (stroke-width=5)
        X=2647.0 (Y: 962.0-1058.0) - regular (stroke-width=5)
        X=2647.0 (Y: 1250.0-1346.0) - regular (stroke-width=5)
        X=3387.0 (Y: 962.0-1058.0) - regular (stroke-width=5)
        X=3387.0 (Y: 1250.0-1346.0) - regular (stroke-width=5)
        X=4576.0 (Y: 962.0-1058.0) - regular (stroke-width=5)
        X=4598.0 (Y: 962.0-1058.0) - THICK (stroke-width=16)
        X=4576.0 (Y: 1250.0-1346.0) - regular (stroke-width=5)
        X=4598.0 (Y: 1250.0-1346.0) - THICK (stroke-width=16)
      🎯 SUCCESS! Extracted 0 staff lines and 13 barlines
      ... (27 additional lines captured)

🔄 Executing: midi_note_separation
   📝 Split MIDI into individual note files with Universal ID preservation
   💻 Command: python Brain/App/Audio Separators/midi_note_separator.py Brain/Base/Trill/Saint-Saens Trio No 2.mid --registry universal_output/universal_notes_registry.json
   ✅ Completed in 0.1s
      ✅ Loaded Universal ID registry: 10 notes
      MIDI NOTE SEPARATOR WITH PEDAL DETECTION
      ==================================================
      Input MIDI: Brain/Base/Trill/Saint-Saens Trio No 2.mid
      🔗 Universal ID Mode: Registry-based matching
         Lookup tables: 6 pitch+track, 6 pitch-only
      🎵 MIDI Type: 1
      ⏱️  Ticks per beat: 960
      🎼 Number of tracks: 3
      Track 0: Unnamed
        Notes found: 0
      Track 1: Flûte
        Notes found: 10
        Pitch distribution: {'A4': 5, 'B4': 1, 'G4': 4}
      Track 2: Violon
        Notes found: 4
        Pitch distribution: {'A3': 1, 'B3': 2, 'C4': 1}
      🎯 TOTAL NOTES: 14
      🦶 PEDAL EVENTS: 2
      🎹 PROCESSING PEDAL EXTENSIONS:
      📁 Creating individual note files in: outputs/midi
      ✅ Created: note_000_Flûte_A4_vel76_a74c.mid
         Track: Flûte → GM Program #74
         Note: A4 (MIDI 69)
         Velocity: 76
         Duration: 1440 ticks
         Start: 14400 ticks
         🔗 Universal ID: a74ceb57... (confidence: 95.0%)
         🦶 No pedal extension
      ✅ Created: note_001_Flûte_G4_vel76_de7f.mid
         Track: Flûte → GM Program #74
         Note: G4 (MIDI 67)
         Velocity: 76
         Duration: 113 ticks
         Start: 15840 ticks
         🔗 Universal ID: de7f91e6... (confidence: 95.0%)
         🦶 No pedal extension
      ✅ Created: note_002_Flûte_A4_vel76_4bbc.mid
         Track: Flûte → GM Program #74
         Note: A4 (MIDI 69)
         Velocity: 76
         Duration: 105 ticks
         Start: 15975 ticks
         🔗 Universal ID: 4bbc0df6... (confidence: 95.0%)
         🦶 No pedal extension
      ✅ Created: note_003_Flûte_G4_vel76.mid
         Track: Flûte → GM Program #74
         Note: G4 (MIDI 67)
         Velocity: 76
         Duration: 105 ticks
         Start: 16106 ticks
         🔢 Sequential ID: 003 (no Universal ID match)
         🦶 No pedal extension
      ✅ Created: note_004_Flûte_A4_vel76.mid
         Track: Flûte → GM Program #74
         Note: A4 (MIDI 69)
         Velocity: 76
         Duration: 98 ticks
         Start: 16230 ticks
         🔢 Sequential ID: 004 (no Universal ID match)
         🦶 No pedal extension
      ✅ Created: note_005_Flûte_G4_vel76.mid
         Track: Flûte → GM Program #74
         Note: G4 (MIDI 67)
         Velocity: 76
         Duration: 90 ticks
         Start: 16346 ticks
         🔢 Sequential ID: 005 (no Universal ID match)
         🦶 No pedal extension
      ✅ Created: note_006_Flûte_A4_vel76.mid
         Track: Flûte → GM Program #74
         Note: A4 (MIDI 69)
         Velocity: 76
         Duration: 98 ticks
         Start: 16470 ticks
         🔢 Sequential ID: 006 (no Universal ID match)
         🦶 No pedal extension
      ✅ Created: note_007_Flûte_G4_vel76.mid
         Track: Flûte → GM Program #74
         Note: G4 (MIDI 67)
         Velocity: 76
         Duration: 101 ticks
         Start: 16598 ticks
         🔢 Sequential ID: 007 (no Universal ID match)
         🦶 No pedal extension
      ✅ Created: note_008_Flûte_A4_vel76.mid
         Track: Flûte → GM Program #74
         Note: A4 (MIDI 69)
         Velocity: 76
         Duration: 63 ticks
         Start: 16733 ticks
         🔢 Sequential ID: 008 (no Universal ID match)
         🦶 No pedal extension
      ✅ Created: note_009_Flûte_B4_vel77_473c.mid
         Track: Flûte → GM Program #74
         Note: B4 (MIDI 71)
         Velocity: 77
         Duration: 480 ticks
         Start: 16800 ticks
         🔗 Universal ID: 473c3978... (confidence: 95.0%)
         🦶 No pedal extension
      ✅ Created: note_010_Violon_B3_vel65_a288.mid
         Track: Violon → GM Program #41
         Note: B3 (MIDI 59)
         Velocity: 65
         Duration: 4406 ticks
         Start: 11520 ticks
         🔗 Universal ID: a2885d4b... (confidence: 95.0%)
         🦶 No pedal extension
      ✅ Created: note_011_Violon_A3_vel66_aaa6.mid
         Track: Violon → GM Program #41
         Note: A3 (MIDI 57)
         Velocity: 66
         Duration: 979 ticks
         Start: 15840 ticks
         🔗 Universal ID: aaa63507... (confidence: 95.0%)
         🦶 No pedal extension
      ✅ Created: note_012_Violon_C4_vel65_abf5.mid
         Track: Violon → GM Program #41
         Note: C4 (MIDI 60)
         Velocity: 65
         Duration: 454 ticks
         Start: 16800 ticks
         🔗 Universal ID: abf5585e... (confidence: 95.0%)
         🦶 No pedal extension
      ✅ Created: note_013_Violon_B3_vel64_0105.mid
         Track: Violon → GM Program #41
         Note: B3 (MIDI 59)
         Velocity: 64
         Duration: 960 ticks
         Start: 17280 ticks
         🔗 Universal ID: 010532f2... (confidence: 95.0%)
         🦶 No pedal extension
      🎯 SUCCESS! Created 14 individual note files
      📁 Output directory: outputs/midi
      SUMMARY BY TRACK:
        Flûte: 10 notes
        Violon: 4 notes
      ... (158 additional lines captured)

🔄 Executing: midi_to_audio_rendering
   📝 Convert MIDI notes to audio files (fast mode) with Universal ID preservation
   💻 Command: python Brain/App/Audio Separators/midi_to_audio_renderer_fast.py outputs/midi --registry universal_output/universal_notes_registry.json
   ✅ Completed in 3.8s
      FAST MIDI TO AUDIO RENDERER
      ==================================================
      Input directory: outputs/midi
      🎵 Using soundfont: soundfonts/SGM_V2_final.sf2
      🎼 Found 2 instruments, 14 files total:
        Flûte: 10 notes → GM Program #74
        Violon: 4 notes → GM Program #41
      ⚡ Using 8 parallel workers for fast processing...
      ❌ note_000_Flûte_A4_vel76_a74c.mid → Exception: Cannot specify ',' with 's'.
      ❌ note_009_Flûte_B4_vel77_473c.mid → Exception: Cannot specify ',' with 's'.
      ❌ note_003_Flûte_G4_vel76.mid → Exception: Cannot specify ',' with 's'.
      ❌ note_007_Flûte_G4_vel76.mid → Exception: Cannot specify ',' with 's'.
      ❌ note_002_Flûte_A4_vel76_4bbc.mid → Exception: Cannot specify ',' with 's'.
      ❌ note_008_Flûte_A4_vel76.mid → Exception: Cannot specify ',' with 's'.
      ❌ note_001_Flûte_G4_vel76_de7f.mid → Exception: Cannot specify ',' with 's'.
      ❌ note_005_Flûte_G4_vel76.mid → Exception: Cannot specify ',' with 's'.
      ❌ note_013_Violon_B3_vel64_0105.mid → Exception: Cannot specify ',' with 's'.
      ❌ note_004_Flûte_A4_vel76.mid → Exception: Cannot specify ',' with 's'.
      ❌ note_011_Violon_A3_vel66_aaa6.mid → Exception: Cannot specify ',' with 's'.
      ❌ note_006_Flûte_A4_vel76.mid → Exception: Cannot specify ',' with 's'.
      ❌ note_012_Violon_C4_vel65_abf5.mid → Exception: Cannot specify ',' with 's'.
      ❌ note_010_Violon_B3_vel65_a288.mid → Exception: Cannot specify ',' with 's'.
      🎯 FAST RENDERING COMPLETE!
      📁 Output directory: outputs/audio
      ✅ Successfully rendered: 0 files
      ❌ Failed to render: 14 files
      📁 Audio file structure:
      audio/
        Flûte/
          note_002_Flûte_A4_vel76_4bbc.wav (208428 bytes)
          note_001_Flûte_G4_vel76_de7f.wav (208940 bytes)
          note_003_Flûte_G4_vel76.wav (208428 bytes)
          note_005_Flûte_G4_vel76.wav (207660 bytes)
          note_007_Flûte_G4_vel76.wav (208428 bytes)
          note_009_Flûte_B4_vel77_473c.wav (229420 bytes)
          note_006_Flûte_A4_vel76.wav (208428 bytes)
          note_004_Flûte_A4_vel76.wav (208428 bytes)
          note_008_Flûte_A4_vel76.wav (206124 bytes)
          note_000_Flûte_A4_vel76_a74c.wav (282156 bytes)
        Violon/
          note_011_Violon_A3_vel66_aaa6.wav (263212 bytes)
          note_012_Violon_C4_vel65_abf5.wav (234284 bytes)
          note_013_Violon_B3_vel64_0105.wav (261932 bytes)
          note_010_Violon_B3_vel65_a288.wav (451884 bytes)
      ... (47 additional lines captured)

🔄 Executing: audio_to_keyframes
   📝 Generate After Effects keyframe data (fast mode) with Universal ID preservation
   💻 Command: python Brain/App/Audio Separators/audio_to_keyframes_fast.py outputs/audio --registry universal_output/universal_notes_registry.json
   ✅ Completed in 5.9s
      FAST AUDIO TO KEYFRAMES EXTRACTOR
      ==================================================
      Input directory: outputs/audio
      🎵 Found 14 audio files
      ⚡ Using 8 parallel workers for fast processing...
      🔊 Analyzing: note_006_Flûte_A4_vel76.wav
         Duration: 2.363s, Sample Rate: 22050Hz
      🔊 Analyzing: note_007_Flûte_G4_vel76.wav
         Duration: 2.363s, Sample Rate: 22050Hz
      🔊 Analyzing: note_008_Flûte_A4_vel76.wav
         Duration: 2.337s, Sample Rate: 22050Hz
      🔊 Analyzing: note_001_Flûte_G4_vel76_de7f.wav
         Duration: 2.368s, Sample Rate: 22050Hz
      🔊 Analyzing: note_011_Violon_A3_vel66_aaa6.wav
         Duration: 2.984s, Sample Rate: 22050Hz
      🔊 Analyzing: note_002_Flûte_A4_vel76_4bbc.wav
         Duration: 2.363s, Sample Rate: 22050Hz
      🔊 Analyzing: note_003_Flûte_G4_vel76.wav
         Duration: 2.363s, Sample Rate: 22050Hz
      🔊 Analyzing: note_012_Violon_C4_vel65_abf5.wav
         Duration: 2.656s, Sample Rate: 22050Hz
      🔊 Analyzing: note_004_Flûte_A4_vel76.wav
         Duration: 2.363s, Sample Rate: 22050Hz
      🔊 Analyzing: note_010_Violon_B3_vel65_a288.wav
         Duration: 5.123s, Sample Rate: 22050Hz
      🔊 Analyzing: note_009_Flûte_B4_vel77_473c.wav
         Duration: 2.601s, Sample Rate: 22050Hz
      🔊 Analyzing: note_013_Violon_B3_vel64_0105.wav
         Duration: 2.969s, Sample Rate: 22050Hz
      🔊 Analyzing: note_005_Flûte_G4_vel76.wav
         Duration: 2.354s, Sample Rate: 22050Hz
      🔊 Analyzing: note_000_Flûte_A4_vel76_a74c.wav
         Duration: 3.199s, Sample Rate: 22050Hz
      ❌ ERROR: too many values to unpack (expected 2)
      ... (34 additional lines captured)

📁 FILES GENERATED: 🎵 10 audio (0.8 MB total)
📊 EXECUTION SUMMARY: 451 messages processed, 4 patterns identified, -0.2% aggregation efficiency
🔥 NUCLEAR EXIT: Last stage completed, forcing immediate termination!
