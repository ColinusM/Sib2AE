UNIVERSAL ID PIPELINE ORCHESTRATOR
============================================================
🎼 MusicXML: SS 9.musicxml
🎹 MIDI: Saint-Saens Trio No 2.mid
🎨 SVG: SS 9 full.svg
📁 Output: universal_output
🚀 Mode: sequential
🔄 Workers: 4
🛡️  Circuit Breaker: Enabled
🎯 Universal ID Preservation: Enabled
📝 New Filename Pattern: Enabled

[19:40:12] 🚀 Starting Universal ID Pipeline Orchestration
[19:40:12] Phase 1: Initializing Core Components
[19:40:12] ✅ Core components initialized
[19:40:12] Phase 2: Executing Note Coordinator
🔄 Executing: note_coordinator
   📝 Generate Universal ID registry and manifests
   💻 Command: python Brain/orchestrator/note_coordinator.py Brain/Base/SS 9.musicxml Brain/Base/Saint-Saens Trio No 2.mid universal_output
   ✅ Completed in 0.2s
         P2: 6 notes, 4 matched to MIDI
      🚀 Ready for pipeline execution with universal note tracking!

[19:40:12] ✅ Note Coordinator completed: 9 Universal IDs loaded
[19:40:12] Phase 3: Executing Tied Note Processor
🔄 Executing: tied_note_processor
   📝 Process tied note relationships with timing calculations
   💻 Command: python Brain/orchestrator/tied_note_processor.py Brain/Base/SS 9.musicxml universal_output/coordination_metadata.json universal_output/universal_notes_registry.json
   ✅ Completed in 0.2s
      🔗 Tied (calculated): 0
      📈 Average confidence: 0.000
      ⏱️  Timing spread: 0.000s

[19:40:12] ✅ Tied Note Processor completed with timing calculations
[19:40:12] Phase 4: Executing Pipeline Stages
[19:40:12] 🔄 Executing Sequential Pipeline
🔄 Executing: noteheads_extraction
   📝 Extract noteheads from MusicXML with pixel-perfect coordinates
   💻 Command: python Brain/App/Symbolic Separators/truly_universal_noteheads_extractor.py Brain/Base/SS 9.musicxml
   ✅ Completed in 0.1s
        B3 M5 → SVG(4006,1429)
      🎯 SUCCESS! Universal transformation applied to Brain/Base/SS 9.musicxml

🔄 Executing: noteheads_subtraction
   📝 Remove noteheads from full SVG while preserving other elements
   💻 Command: python Brain/App/Symbolic Separators/truly_universal_noteheads_subtractor.py Brain/Base/SS 9.musicxml Brain/Base/SS 9 full.svg
   ✅ Completed in 0.1s
      ✅ Created SVG without noteheads: outputs/svg/SS 9 full_without_noteheads.svg
      🎯 SUCCESS! Full SVG with noteheads removed: outputs/svg/SS 9 full_without_noteheads.svg

🔄 Executing: instrument_separation
   📝 Create individual SVG files per instrument
   💻 Command: python Brain/App/Symbolic Separators/xml_based_instrument_separator.py Brain/Base/SS 9.musicxml Brain/Base/SS 9 full.svg outputs/svg/instruments
   ✅ Completed in 0.1s
         💾 File size: 38183 bytes
      🎯 SUCCESS! Created 2 instrument-specific SVG files in 'outputs/svg/instruments/' directory

🔄 Executing: individual_noteheads_creation
   📝 Create one SVG file per notehead for After Effects animation
   💻 Command: python Brain/App/Symbolic Separators/individual_noteheads_creator.py Brain/Base/SS 9.musicxml
   ✅ Completed in 0.1s
          A3 M5 → SVG(3617,1441)
          C4 M5 → SVG(3841,1417)
          B3 M5 → SVG(4005,1429)

🔄 Executing: staff_barlines_extraction
   📝 Extract staff lines and barlines for background elements
   💻 Command: python Brain/App/Symbolic Separators/staff_barlines_extractor.py Brain/Base/SS 9.musicxml Brain/Base/SS 9 full.svg
   ✅ Completed in 0.0s
        X=4600.0 (Y: 1297.0-1393.0) - THICK (stroke-width=16)
      🎯 SUCCESS! Extracted 10 staff lines and 13 barlines

🔄 Executing: midi_note_separation
   📝 Split MIDI into individual note files (foundation)
   💻 Command: python Brain/App/Audio Separators/midi_note_separator.py Brain/Base/Saint-Saens Trio No 2.mid
   ✅ Completed in 0.1s
      SUMMARY BY TRACK:
        Flûte: 2 notes
        Violon: 4 notes

🔄 Executing: midi_to_audio_rendering
   📝 Convert MIDI notes to audio files (fast mode)
   💻 Command: python Brain/App/Audio Separators/midi_to_audio_renderer_fast.py outputs/midi
   ✅ Completed in 0.8s
          note_003_Violon_A3_vel66.wav (1,103,916 bytes)
          note_005_Violon_B3_vel64.wav (1,182,252 bytes)
          note_002_Violon_B3_vel65.wav (1,054,764 bytes)

🔄 Executing: audio_to_keyframes
   📝 Generate After Effects keyframe data (fast mode)
   💻 Command: python Brain/App/Audio Separators/audio_to_keyframes_fast.py outputs/audio
   ✅ Completed in 5.0s
          note_002_Violon_B3_vel65_keyframes.json
          ... and 1 more files
      🎯 Cleanup complete, exiting...

🔥 NUCLEAR EXIT: Last stage completed, forcing immediate termination!
